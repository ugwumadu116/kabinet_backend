{"version":3,"sources":["../server/index.js"],"names":["app","dotenv","config","use","express","json","urlencoded","extended","PORT","process","env","prefix","get","req","res","status","data","cardRouter","kabinetRouter","Error","error","message","listen","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;AAGA,MAAMA,GAAG,GAAG,uBAAZ;;AACAC,gBAAOC,MAAP;;AAEAF,GAAG,CAACG,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAL,GAAG,CAACG,GAAJ,CAAQC,iBAAQE,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAP,GAAG,CAACG,GAAJ,CAAQ,oBAAR;AAEA,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AACA,MAAMG,MAAM,GAAG,SAAf;AAEAX,GAAG,CAACY,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAC9CU,EAAAA,MAAM,EAAE,GADsC;AAE9CC,EAAAA,IAAI,EAAE;AAFwC,CAArB,CAA3B;AAKAhB,GAAG,CAACG,GAAJ,CAAS,GAAEQ,MAAO,GAAlB,EAAsBM,aAAtB;AACAjB,GAAG,CAACG,GAAJ,CAAS,GAAEQ,MAAO,GAAlB,EAAsBO,gBAAtB;AAEAlB,GAAG,CAACG,GAAJ,CAAQ,OAAOU,GAAP,EAAYC,GAAZ,KAAoB;AAC1B,MAAI;AACF,UAAM,IAAIK,KAAJ,CAAU,sBAAV,CAAN;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,WAAON,GAAG,CAACC,MAAJ,CAAWK,KAAK,CAACL,MAAN,IAAgB,GAA3B,EAAgCV,IAAhC,CAAqC;AAC1CU,MAAAA,MAAM,EAAEK,KAAK,CAACL,MAAN,IAAgB,GADkB;AAE1CK,MAAAA,KAAK,EAAEA,KAAK,CAACC;AAF6B,KAArC,CAAP;AAID;AACF,CATD;AAWArB,GAAG,CAACsB,MAAJ,CAAWd,IAAX,EAAiB,MAAMe,OAAO,CAACC,GAAR,CAAa,WAAUhB,IAAK,EAA5B,CAAvB;eAEeR,G","sourcesContent":["import express from 'express';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\n\nimport cardRouter from './routes/card.route';\nimport kabinetRouter from './routes/kabinet.route';\n\n\nconst app = express();\ndotenv.config();\n\napp.use(express.json());  \napp.use(express.urlencoded({ extended: true }))\napp.use(cors());\n\nconst PORT = process.env.PORT || 3000;\nconst prefix = '/api/v1';\n\napp.get('/', (req, res) => res.status(200).json({\n  status: 200,\n  data: 'welcome to kabinet',\n}));\n\napp.use(`${prefix}/`, cardRouter);\napp.use(`${prefix}/`, kabinetRouter);\n\napp.use(async (req, res) => {\n  try {\n    throw new Error('Route does not exist');\n  } catch (error) {\n    return res.status(error.status || 404).json({\n      status: error.status || 404,\n      error: error.message,\n    });\n  }\n});\n\napp.listen(PORT, () => console.log(`Welcome ${PORT}`));\n\nexport default app;\n"],"file":"index.js"}